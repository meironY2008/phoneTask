{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","book","setBook","name","setName","number","setNumber","showPersonsList","a","axios","get","data","useEffect","handleDelete","e","delete","target","id","handleSubmit","document","querySelectorAll","forEach","input","value","exist","find","person","put","post","className","map","item","onClick","onChange","type","placeholder","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4PAsEeA,MAnEf,WAAgB,IAAD,EACWC,mBAAS,IADpB,mBACNC,EADM,KACAC,EADA,OAEWF,qBAFX,mBAENG,EAFM,KAEAC,EAFA,OAGeJ,qBAHf,mBAGNK,EAHM,KAGEC,EAHF,KAKPC,EAAe,uCAAG,8BAAAC,EAAA,sEACCC,IAAMC,IAAI,gBADX,gBACdC,EADc,EACdA,KACRT,EAAQS,GAFc,2CAAH,qDAKrBC,qBAAU,WACRL,MACC,IAEH,IAAMM,EAAe,SAACC,GACpBL,IAAMM,OAAN,uBAA6BD,EAAEE,OAAOC,KACtCV,KAGIW,EAAY,uCAAG,gCAAAV,EAAA,6DACFW,SAASC,iBAAiB,SAClCC,SAAQ,SAACC,GAAD,OAAYA,EAAMC,MAAQ,MAFxB,SAGId,IAAMC,IAAI,gBAHd,mBAGXC,EAHW,EAGXA,OACFa,EAAQb,EAAKc,MAAK,SAACC,GAAD,OAAYA,EAAOvB,OAASA,MAJjC,kCAMTM,IAAMkB,IAAN,uBAA0BH,EAAMP,IAAM,CAC1Cd,OACAE,WARa,iDAUTI,IAAMmB,KAAK,eAAgB,CAC/BzB,OACAE,WAZa,QAcnBE,IAdmB,4CAAH,qDAiBlB,OACE,yBAAKsB,UAAU,OACb,0CACA,4BACG5B,EAAK6B,KAAI,SAACC,GAAD,OACR,4BACGA,EAAK5B,KADR,IACe4B,EAAK1B,OAAQ,IAC1B,4BAAQY,GAAIc,EAAKd,GAAIe,QAASnB,GAA9B,eAON,2BACEoB,SAAU,SAACnB,GAAD,OAAOV,EAAQU,EAAEE,OAAOO,QAClCW,KAAK,OACLC,YAAY,YAEd,2BACEF,SAAU,SAACnB,GAAD,OAAOR,EAAUQ,EAAEE,OAAOO,QACpCW,KAAK,OACLC,YAAY,cAEd,4BAAQD,KAAK,SAASF,QAAS,kBAAMd,MAArC,YCnDckB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFxB,SAASyB,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a3548aec.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\n\nfunction App() {\n  const [book, setBook] = useState([]);\n  const [name, setName] = useState();\n  const [number, setNumber] = useState();\n\n  const showPersonsList = async () => {\n    const { data } = await axios.get(\"/api/persons\");\n    setBook(data);\n  };\n\n  useEffect(() => {\n    showPersonsList();\n  }, []);\n\n  const handleDelete = (e) => {\n    axios.delete(`/api/persons/${e.target.id}`);\n    showPersonsList();\n  };\n\n  const handleSubmit = async () => {\n    const inputArr = document.querySelectorAll(\"input\");\n    inputArr.forEach((input) => (input.value = \"\"));\n    const { data } = await axios.get(\"/api/persons\");\n    const exist = data.find((person) => person.name === name);\n    exist\n      ? await axios.put(`/api/persons/${exist.id}`, {\n          name,\n          number,\n        })\n      : await axios.post(\"/api/persons\", {\n          name,\n          number,\n        });\n    showPersonsList();\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Phone Book</h1>\n      <ul>\n        {book.map((item) => (\n          <li>\n            {item.name} {item.number}{\" \"}\n            <button id={item.id} onClick={handleDelete}>\n              delete\n            </button>\n          </li>\n        ))}\n      </ul>\n\n      <input\n        onChange={(e) => setName(e.target.value)}\n        type=\"text\"\n        placeholder=\"Name...\"\n      />\n      <input\n        onChange={(e) => setNumber(e.target.value)}\n        type=\"text\"\n        placeholder=\"Number...\"\n      />\n      <button type=\"submit\" onClick={() => handleSubmit()}>\n        Submit\n      </button>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}